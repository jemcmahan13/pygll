%root Porgram

%tokens
if	'if'
then	'then'
else	'else'
print	'print'
lt	'<'
gt	'>'
leq	'<='
geq	'>='
equal	'=='
plus	'\+'
minus	'\-'
mult	'\*'
divide	'\/'
number	'[0-9]+'
name	'\w+'

%grammar
Program := Statements
	 ;

Statements := Statement [Statement]
	    ;

Statement := name '=' Expression ';'			# Assignment name _ expr _
    	   | if Expression then '{' Statements '}' OptionalElse
	   # Condition _ cond _ _ truebranch _ elsebranch
	   | print Expression ';'   		  		# Print _ name _
	   ;

OptionalElse := else '{' Statements '}'			# Else _ _ stmts _
	      | $
	      ;

Expression := ExpMath ExpressionR
	    ;

ExpressionR := { lt gt leq geq equal } Expression	# ExpR op exp
	     | $
	     ;

ExpMath := ExpMult ExpMathR				# ExpMath left right
	 ;

ExpMathR := { plus minus } ExpMath			# ExpMath op rest
	 | $
	 ;

ExpMult := ExpEnd ExpMultR				# ExpMult left right
	 ;

ExpMultR := { mult divide } ExpMult			# ExpMultR op rest
	 | $
	 ;

ExpEnd := '\(' Expression '\)'
	| number
	| name
	;

